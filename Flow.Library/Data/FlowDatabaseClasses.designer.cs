#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Flow.Library.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class FlowDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFlowTemplate(FlowTemplate instance);
    partial void UpdateFlowTemplate(FlowTemplate instance);
    partial void DeleteFlowTemplate(FlowTemplate instance);
    partial void InsertFlowInstance(FlowInstance instance);
    partial void UpdateFlowInstance(FlowInstance instance);
    partial void DeleteFlowInstance(FlowInstance instance);
    partial void InsertFlowTemplateStep(FlowTemplateStep instance);
    partial void UpdateFlowTemplateStep(FlowTemplateStep instance);
    partial void DeleteFlowTemplateStep(FlowTemplateStep instance);
    #endregion
		
		public FlowDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FlowTemplate> FlowTemplates
		{
			get
			{
				return this.GetTable<FlowTemplate>();
			}
		}
		
		public System.Data.Linq.Table<FlowInstance> FlowInstances
		{
			get
			{
				return this.GetTable<FlowInstance>();
			}
		}
		
		public System.Data.Linq.Table<FlowTemplateStep> FlowTemplateSteps
		{
			get
			{
				return this.GetTable<FlowTemplateStep>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class FlowTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<FlowTemplateStep> _FlowTemplateSteps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FlowTemplate()
		{
			this._FlowTemplateSteps = new EntitySet<FlowTemplateStep>(new Action<FlowTemplateStep>(this.attach_FlowTemplateSteps), new Action<FlowTemplateStep>(this.detach_FlowTemplateSteps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowTemplate_FlowTemplateStep", Storage="_FlowTemplateSteps", ThisKey="Id", OtherKey="FlowTemplateId")]
		public EntitySet<FlowTemplateStep> FlowTemplateSteps
		{
			get
			{
				return this._FlowTemplateSteps;
			}
			set
			{
				this._FlowTemplateSteps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowTemplateSteps(FlowTemplateStep entity)
		{
			this.SendPropertyChanging();
			entity.FlowTemplate = this;
		}
		
		private void detach_FlowTemplateSteps(FlowTemplateStep entity)
		{
			this.SendPropertyChanging();
			entity.FlowTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class FlowInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public FlowInstance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class FlowTemplateStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _FlowTemplateId;
		
		private int _StepTypeId;
		
		private EntityRef<FlowTemplate> _FlowTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlowTemplateIdChanging(int value);
    partial void OnFlowTemplateIdChanged();
    partial void OnStepTypeIdChanging(int value);
    partial void OnStepTypeIdChanged();
    #endregion
		
		public FlowTemplateStep()
		{
			this._FlowTemplate = default(EntityRef<FlowTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowTemplateId")]
		public int FlowTemplateId
		{
			get
			{
				return this._FlowTemplateId;
			}
			set
			{
				if ((this._FlowTemplateId != value))
				{
					if (this._FlowTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._FlowTemplateId = value;
					this.SendPropertyChanged("FlowTemplateId");
					this.OnFlowTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepTypeId")]
		public int StepTypeId
		{
			get
			{
				return this._StepTypeId;
			}
			set
			{
				if ((this._StepTypeId != value))
				{
					this.OnStepTypeIdChanging(value);
					this.SendPropertyChanging();
					this._StepTypeId = value;
					this.SendPropertyChanged("StepTypeId");
					this.OnStepTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowTemplate_FlowTemplateStep", Storage="_FlowTemplate", ThisKey="FlowTemplateId", OtherKey="Id", IsForeignKey=true)]
		public FlowTemplate FlowTemplate
		{
			get
			{
				return this._FlowTemplate.Entity;
			}
			set
			{
				FlowTemplate previousValue = this._FlowTemplate.Entity;
				if (((previousValue != value) 
							|| (this._FlowTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowTemplate.Entity = null;
						previousValue.FlowTemplateSteps.Remove(this);
					}
					this._FlowTemplate.Entity = value;
					if ((value != null))
					{
						value.FlowTemplateSteps.Add(this);
						this._FlowTemplateId = value.Id;
					}
					else
					{
						this._FlowTemplateId = default(int);
					}
					this.SendPropertyChanged("FlowTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
